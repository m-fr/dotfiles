(include "variables.yuck")
(include "bspwm.yuck")
(include "vmware.yuck")
(include "app.yuck")
(include "network.yuck")

(defwidget metric [class label value ?onchange ?maxValue]
    (box
        :orientation "h"
        :space-evenly false
        :class class
        (box
            :class "icon" 
            label
        )
        (scale
            :tooltip {value == 'x' ? 0 : value}
            :min 0
            :max {maxValue ?: 100}
            :value {value == 'x' ? 0 : value}
            :active {onchange ?: "" != ""}
            :onchange {onchange ?: "" }
        )
    )
)

(defwidget clock[]
    (box
        :class "clock box"
        (label :class "time" :text time)
    )
)

(defwidget date[]
    (box
        :class "box"
        :orientation "v"
        :space-evenly false
        (button
            :class "date"
            :onclick "eww update showCal=${ showCal ? false : true }"
            date)
        (revealer
            :reveal showCal
            :transition "slidedown"
            (calendar
                :class "calendar"
                :day day
                :month {month - 1}
                :year year
            )
        )
    )
)

(defwidget core [value ?class]
    (progress
        :class {class ?: ""}
        :flipped true
        :value {value == 'x' ? 0 : value}
        :orientation "v"
    )
)

(defwidget cpu[]
    (box
        :class "cpu"
        :orientation "v"
        :space-evenly false
        (button
            :onclick "eww update showCores=${ showCores ? false : true }"
            (metric :class "cpu_bar" :label "" :value {EWW_CPU.avg})
        )
        (revealer
            :reveal showCores
            :transition "slidedown"
            :class "cores"
            (box
                :orientation "h"
                (core :value {EWW_CPU.cores[0].usage})
                (core :value {EWW_CPU.cores[1].usage})
                (core :value {EWW_CPU.cores[2].usage})
                (core :value {EWW_CPU.cores[3].usage})
                (core :value {EWW_CPU.cores[4].usage})
                (core :value {EWW_CPU.cores[5].usage})
                (core :value {EWW_CPU.cores[6].usage})
                (core :value {EWW_CPU.cores[7].usage})
            )
        )
    )
)

(defwidget sys[]
    (box
        :orientation "v"
        :space-evenly false
        :class "sys box"
        (cpu)
        (metric :class "mem_bar" :label "" :value {EWW_RAM.used_mem_perc})
        (metric :class "disk_bar" :label "" :value {EWW_DISK["/"].used_perc})
        (metric :class "bright_bar" :label "" :value brightness)
        (metric
            :class "vol_bar ${volume == 'x' ? 'mute' : ''}"
            :label {volume == "x" ? "" :
                volume > 50 ? "" :
                volume > 0 ? "" : ""
            }
            :value volume
        )
        (metric
            :class "bat_bar"
            :label {EWW_BATTERY["BAT0"].status == "Discharging" ?
                EWW_BATTERY["BAT0"].capacity > 90 ? "" :
                EWW_BATTERY["BAT0"].capacity > 60 ? "" :
                EWW_BATTERY["BAT0"].capacity > 30 ? "" :
                EWW_BATTERY["BAT0"].capacity > 10 ? "" : "" :
                EWW_BATTERY["BAT0"].status == "Charging" ? "" : ""
            }
            :value {EWW_BATTERY["BAT0"].capacity}
        )
    )
)

(defwidget keyboard[]
    (box
        :orientation "h"
        :class "keyboard"
        :space-evenly false
        (box
            :space-evenly false
            :class "box"
            (box :class "icon" "")
            (box :class "kb icon" kbd)
        )
        (box
            :class "box icon ${caps == 'on' ? 'on' : 'off'}"
            ""
        )
        (box
            :class "box icon ${kbdlight == 2 ? 'max' : kbdlight == 1 ? 'on' : 'off'}"
            ""
        )
    )
)

(defwidget powermenu[]
    (box
        :orientation "v"
        :space-evenly false
        :class "menu"
        (box
            :orientation "h"
            :space-evenly false
            (box
                :class "box"
                (button
                    :onclick "power poweroff"
                    :class "icon btn stop"
                    ""
                )
            )
            (box
                :class "box"
                (button
                    :onclick "power reboot"
                    :class "icon btn reset"
                    ""
                )
            )
            (box
                :class "box"
                (button
                    :onclick "power suspend"
                    :class "icon btn suspend"
                    ""
                )
            )
            (box
                :class "box"
                (button
                    :onclick "power logout"
                    :class "icon btn pause"
                    ""
                )
            )
            (box
                :class "box"
                (button
                    :onclick "power lock"
                    :class "icon btn run"
                    ""
                )
            )
        )
    )
)

(defwidget apt[]
    (box
        :class "info box"
        :orientation "v"
        :space-evenly false
        (button
            :onclick "eww update showApt=${ showApt ? false : true }"
            (box
                :class "apt"
                :space-evenly false
                (label :text "")
                (label :text aptNum)
            )
        )
        (revealer
            :transition "slidedown"
            :reveal showApt
            (box
                :class "packages"
                :orientation "v"
                apt
            )
        )
    )
)

(defwidget cve[]
    (box
        :class "info box"
        :orientation "v"
        :space-evenly false
        (button
            :onclick "eww update showCVE=${ showCVE ? false : true }"
            (box
                :class "cve"
                :space-evenly false
                (label :text "")
                (label
                    :class "low"
                    :text CVElow
                )
                (label
                    :class "medium"
                    :text CVEmedium
                )
                (label
                    :class "high"
                    :text CVEhigh
                )
            )
        )
        (revealer
            :transition "slidedown"
            :reveal showCVE
            (scroll
                :vscroll true
                (box
                    :class "packages"
                    :orientation "v"
                    CVE
                )
            )
        )
    )
)

